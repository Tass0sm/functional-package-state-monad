#+title: State Monad with Packages
#+property: header-args:scheme :tangle packages-implementation.scm

#+begin_src scheme
(use-modules (guix gexp)
             (guix store)
             (guix monads)
             (guix modules)
             (guix profiles)
             (guix packages)
             (guix download)
             (guix derivations)
             (guix build-system trivial)
             (guix licenses)
             (gnu packages)
             (gnu packages base)

             (srfi srfi-1)
             (srfi srfi-11)
             (ice-9 match))
#+end_src

* Functor Instance
#+begin_src scheme
(define (fmap f fa)
  (lambda (st)
    (let-values (((a s) (fa st)))
      (values (f a) s))))
#+end_src

* Applicative Instance
#+begin_src scheme
(define pure state-return)

(define (<*> sf sa)
  (lambda (st)
    (let*-values (((f st1) (sf st))
                  ((a st2) (sa st1)))
      (values (f a) st2))))

(define (liftA2 f sa sb)
  (lambda (st)
    (let*-values (((a st1) (sa st))
                  ((b st2) (sb st1)))
      (values (f a b) st2))))
#+end_src

* Utils
#+begin_src scheme
(define (traverse f la)
  (fold-right (lambda (x ys) (liftA2 cons (f x) ys)) (pure '()) la))

(define (sequence la)
  (traverse identity la))
#+end_src

* Package Example
** Setup
#+begin_src scheme
(define initial-state #f)
#+end_src

** Monadic Packages
#+begin_src scheme
(define mmthing1
  (lambda (state)
    (let ((pkg (package
                 (name "thing1")
                 (outputs (list "out" "state"))
                 (version "0.1")
                 (source #f)
                 (build-system trivial-build-system)
                 (arguments
                  (list
                   #:modules '((guix build utils))
                   #:builder
                   '(let ((out (assoc-ref %outputs "out"))
                          (out-state (assoc-ref %outputs "state"))
                          (state-input (assoc-ref %build-inputs "state")))
                      (use-modules (guix build utils))

                      (mkdir out)    ; create /gnu/store/...-goo
                      (call-with-output-file (string-append out "/test")
                        (lambda (p)
                          (display '(hello guix) p)))

                      (mkdir out-state)    ; create /gnu/store/...-goo
                      (call-with-output-file (string-append out-state "/state")
                        (lambda (p)
                          (display '(hello state) p))))))
                 (synopsis "Hello, GNU world: An example GNU package")
                 (description "Guess what GNU Hello prints!")
                 (home-page "https://www.gnu.org/software/hello/")
                 (license gpl3+))))
      (values pkg (list pkg "state")))))

(define mmthing2
  (lambda (state)
    (let ((pkg (package
                 (name "thing2")
                 (outputs (list "out" "state"))
                 (version "0.1")
                 (source #f)
                 (build-system trivial-build-system)
                 (arguments
                  (list
                   #:modules '((guix build utils))
                   #:builder
                   '(let ((out (assoc-ref %outputs "out"))
                          (out-state (assoc-ref %outputs "state"))
                          (state-input (assoc-ref %build-inputs "state")))
                      (use-modules (guix build utils))

                      (mkdir out)    ; create /gnu/store/...-goo
                      (call-with-output-file (string-append out "/test")
                        (lambda (p)
                          (display '(hello thing2) p)))

                      (mkdir out-state)    ; create /gnu/store/...-goo
                      (copy-recursively state-input out-state))))
                 (inputs
                  `(("state" ,@state)))
                 (synopsis "Hello, GNU world: An example GNU package")
                 (description "Guess what GNU Hello prints!")
                 (home-page "https://www.gnu.org/software/hello/")
                 (license gpl3+))))
      (values pkg (list pkg "state")))))

(define list-of-ma (list mmthing1 mmthing2))
(define mlist-of-a (sequence list-of-ma))
(define-values (list-of-a state) (run-with-state mlist-of-a initial-state))
(define mfst
  (packages->manifest
   `(,@list-of-a
     ,state)))

mfst
#+end_src
